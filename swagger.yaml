openapi: 3.0.0
info:
  title: Truck Manager API
  version: "1.0.0"
  description: API documentation for the Truck Manager system

servers:
  - url: http://localhost:5005
    description: Local development server

paths:
  /auth/login:
    post:
      summary: User login
      tags: [Authentication]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Credentials'
      responses:
        '200':
          description: Successful authentication
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          description: Invalid credentials
        '500':
          description: Server error

  /auth/profile:
    get:
      summary: Get user profile
      description: Returns the profile of the currently logged in user.
      tags:
        - Authentication
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successfully returned user profile
          content:
            application/json:
              schema:
                type: object
                properties:
                  _id:
                    type: string
                  username:
                    type: string
                  role:
                    type: string
        '401':
          description: Unauthorized (token missing or invalid)
        '404':
          description: No user found

  /driver/all:
    get:
      summary: Get all drivers
      tags: [Drivers]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: A list of drivers
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Driver'

  /driver/:
    post:
      summary: Create a new driver
      tags: [Drivers]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewDriver'
      responses:
        '201':
          description: Driver created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  driver:
                    $ref: '#/components/schemas/Driver'
        '400':
          description: Cannot create another admin. Only one admin is allowed.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: There is one admin. Can not create another one.
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string

  /driver/{id}:
    get:
      summary: Get a driver by ID
      tags: [Drivers]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Driver found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Driver'
        '404':
          description: Driver not found
        '500':
          description: Server error

    put:
      summary: Update a driver by ID
      tags: [Drivers]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewDriver'
      responses:
        '200':
          description: Driver updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Driver'
        '404':
          description: Driver not found
        '500':
          description: Server error

    delete:
      summary: Delete a driver by ID
      tags: [Drivers]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Driver deleted
        '404':
          description: Driver not found
        '500':
          description: Server error

  /truck/all:
    get:
      summary: Get all trucks
      tags: [Trucks]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: A list of trucks
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Truck'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string

  /truck/:
    post:
      summary: Create a new truck
      tags: [Trucks]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewTruck'
      responses:
        '201':
          description: Truck created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Truck'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string

  /truck/assign:
    patch:
      summary: Assign a truck to a driver
      tags: [Trucks]
      security:
        - bearerAuth: []
      description: Assigns a specific truck to a specific driver, only if both are available.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [truckId, driverId]
              properties:
                truckId:
                  type: string
                driverId:
                  type: string
      responses:
        '200':
          description: Truck successfully assigned to driver
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Truck'
        '400':
          description: Invalid data or assignment conflict
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Driver is already assigned to another truck
        '404':
          description: Truck or driver not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        '500':
          description: Server error

  /truck/{plate}:
    get:
      summary: Get a truck by plate number
      tags: [Trucks]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: plate
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Truck found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Truck'
        '404':
          description: Truck not found
        '500':
          description: Server error

  /truck/{id}:
    put:
      summary: Update a truck by ID
      tags: [Trucks]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewTruck'
      responses:
        '200':
          description: Truck updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Truck'
        '404':
          description: Truck not found
        '500':
          description: Server error

    delete:
      summary: Delete a truck by ID
      tags: [Trucks]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Truck deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '404':
          description: Truck not found
        '500':
          description: Server error

  /truck/my-truck:
    get:
      tags:
        - My Truck
      summary: Get the truck assigned to the logged-in driver
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successfully retrieved assigned truck
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Truck'
        '404':
          description: No truck assigned to this driver
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: No truck assigned to this driver
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Server error
                    
    patch:
      summary: Update mileage and last maintenance of the truck assigned to the authenticated driver
      tags:
        - My Truck
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                mileage:
                  type: number
                  example: 150000
                lastMaintenance:
                  type: string
                  format: date
                  example: "2025-05-17"
              required:
                - mileage
      responses:
        '200':
          description: Truck updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Truck'
        '400':
          description: Invalid input
        '401':
          description: Unauthorized - Driver not authenticated
        '404':
          description: Assigned truck not found
        '500':
          description: Server error

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Credentials:
      type: object
      required: [username, password]
      properties:
        username:
          type: string
          example: admin
        password:
          type: string
          example: admin

    AuthResponse:
      type: object
      properties:
        token:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9
        expiresIn:
          type: integer
          example: 3600

    AssignedTruckDetails:
      type: object
      properties:
        plateNumber:
          type: string
          example: KZA1234
        brand:
          type: string
          example: Mercedes
        model:
          type: string
          example: Actros
        year:
          type: integer
          example: 2020

    AssignedDriverDetails:
      type: object
      properties:
        _id:
          type: string
          example: 665a282c1cd34ddf8d984b6c
        name:
          type: string
          example: Giannis
        lastname:
          type: string
          example: Papas
        licenseNumber:
          type: string
          example: 1347h743h71hf44j9f818fj3

    Driver:
      type: object
      properties:
        _id:
          type: string
        name:
          type: string
        lastname:
          type: string
        licenseNumber:
          type: string
        username:
          type: string
        role:
          type: string
        assignedTruck:
          oneOf:
            - $ref: '#/components/schemas/AssignedTruckDetails'
            - type: 'null'

    NewDriver:
      type: object
      properties:
        name:
          type: string
          example: Kostas
        lastname:
          type: string
          example: Papados
        licenseNumber:
          type: string
          example: AB123456
        username:
          type: string
          example: kostas.papados
        password:
          type: string
          example: supersafePwd
        role:
          type: string
          enum: [admin, driver]
          default: driver

    Truck:
      type: object
      properties:
        _id:
          type: string
        plateNumber:
          type: string
        brand:
          type: string
        model:
          type: string
        year:
          type: integer
        isAvailable:
          type: boolean
        lastMaintenance:
          type: string
          format: date
        mileage:
          type: number
          description: Current mileage of the truck
        assignedDriver:
          oneOf:
            - $ref: '#/components/schemas/AssignedDriverDetails'
            - type: 'null'
        createdAt:
          type: string
          format: date-time

    NewTruck:
      type: object
      required: [plateNumber, brand, model, year]
      properties:
        plateNumber:
          type: string
        brand:
          type: string
        model:
          type: string
        year:
          type: integer
        isAvailable:
          type: boolean
          example: true
        lastMaintenance:
          type: string
          format: date
        assignedDriver:
          type: string
          example: null
